# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
    paths:
      - 'aspnet-core/**'
  pull_request:
    branches: [ "master" ]
    paths:
      - 'aspnet-core/**'

jobs:
  build-test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x
        
    - name: Install Coverlet
      run: dotnet tool install --global coverlet.console
    
    - name: Restore dependencies
      run: dotnet restore aspnet-core/ImpactSpace.Core.sln
    
    - name: Build
      run: dotnet build --configuration Release aspnet-core/ImpactSpace.Core.sln
      
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Test Solution with Coverage
      working-directory: aspnet-core
      run: |
        dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover --blame --max-retries 1 ImpactSpace.Core.sln
        mkdir -p TestResults
        find . -name coverage.opencover.xml -exec cp {} ./TestResults/ \;
        
    - name: Filter coverage report
      working-directory: aspnet-core
      run: |
        reportgenerator "-reports:./TestResults/coverage.opencover.xml" "-targetdir:./TestResults/filtered" "-reporttypes:HtmlInline_AzurePipelines" "-assemblyfilters:-ImpactSpace.Core.EntityFrameworkCore.Migrations"
        mv ./TestResults/filtered/coverage.opencover.xml ./TestResults/coverage.opencover.xml.filtered

    - name: Upload coverage report - Solution Tests
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./aspnet-core/TestResults/coverage.opencover.xml.filtered

